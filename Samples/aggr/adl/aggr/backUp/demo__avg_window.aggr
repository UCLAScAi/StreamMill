window CAggregate demo$avg (next REAL):
(output REAL) {

@
@

@
double tsum;
int tcnt;
@

initialize:
{
@

status->tsum = next;

status->tcnt = 1;

memset(&key, 0, sizeof(key));
memset(&data, 0, sizeof(data));
data.data = datadata;
key.data = keydata;
/* Set return to the ratio of the sum and the count */
double ret = status->tsum/status->tcnt;
/* copy return to the data structure which we want to return */
memcpy((char*)data.data+0, &ret, sizeof(double));
data.size = 8;
key.size = 0;
/* Write the data we want to return to the user table which will
store the output of the UDA */
if ((rc = status->ret->put(status->ret, &key, &data, DB_APPEND))!=0) {
adlabort(rc, "IM_REL->put()");
}
@
}
ITERATE:
{
@

status->tsum = 0.9*status->tsum + 1.1*next;

status->tcnt = status->tcnt + 1;

memset(&key, 0, sizeof(key));
memset(&data, 0, sizeof(data));
data.data = datadata;
key.data = keydata;

double ret = status->tsum/status->tcnt;

memcpy((char*)data.data+0, &ret, sizeof(double));
data.size = 8;
key.size = 0;

if ((rc = status->ret->put(status->ret, &key, &data, DB_APPEND))!=0) {
adlabort(rc, "IM_REL->put()");
}
@
}
};

