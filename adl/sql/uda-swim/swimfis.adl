/*
struct iExt_ {
	  int length;
		  int *pt;
};

*/

CAggregate swimfis(tid int, cur_trans IEXT):(ItemSet char(100), Frequency int) {
	@
		const int MAX_FREQ_ITEM_LEN = 100; // should change the singature too.
	/* global c stuff here */
	@


	@
  	/* things to put in the status structure here */
		// config variables
		SwimFisStatus sfs;		
	@

	initialize: {
 	@
		char tabName[20];
		IM_RELC * paramTable;
		char param_name[MAX_FREQ_ITEM_LEN+1];
		char param_value[MAX_FREQ_ITEM_LEN+1];
		int argv[6] = {0,0,0,0,0,0};
		int first_entry = 1;

		status->sfs.trans_avg_len = 0;
		status->sfs.no_items = 0;
		status->sfs.global_min_supp = 0;
		status->sfs.slide_min_supp = 0;
		status->sfs.window_size = 0; 
		status->sfs.slide_size = 0;
		status->sfs.L_delay_max = 0;
		status->sfs.no_slides = 0;
		status->sfs.sum_all_pat_lens = 0;
		status->sfs.max_needed_mem = 0;
		
		status->sfs.StreamMillBuffer = (int *)malloc(MAX_FREQ_ITEM_LEN*sizeof(int)*status->sfs.slide_size);
		status->sfs.StreamMillPtr = 0;

//create table swimparams(param_name char(100), param_value char(100)) memory;
		sprintf(tabName, "swimparams"); 
		if ((rc = ((IM_REL*)inMemTables->operator[](tabName))->cursor(((IM_REL*)inMemTables->operator[](tabName)), &paramTable, 0)) != 0) {
			adlabortESLAggr(bm->lookup("hetal_errors"), rc, "\nError in Aggregate hetal__computeavg: IM_REL->cursor()");
			return;
		}
		
		while (rc==0) {
			memset(&key, 0, sizeof(key));
			memset(&data, 0, sizeof(data));
			rc = paramTable->c_get(paramTable, &key, &data, (first_entry)? DB_FIRST:DB_NEXT);
			if (rc==0) {
				first_entry = 0;
				memcpy(param_name, (char*)data.data, 100);
				param_name[100] = '\0';
				memcpy(param_value, (char*)data.data+100, 100);
				param_value[100] = '\0';
				//TODO: Now use these pairs to fill up the configuration parameters.
				if (!strcmp(param_name, "trans_avg_len")) {
					status->sfs.trans_avg_len = atoi(param_value);
					argv[0] = 1;
				}	else if (!strcmp(param_name, "window_size")) {
					status->sfs.window_size = atoi(param_value);
					argv[1] = 1;
				}	else if (!strcmp(param_name, "slide_size")) {
					status->sfs.slide_size = atoi(param_value);
					argv[2] = 1;	
				}	else if (!strcmp(param_name, "L_delay_max")) {
					status->sfs.L_delay_max = atoi(param_value);
					argv[3] = 1;
				}	else if (!strcmp(param_name, "no_items")) {
					status->sfs.no_items = atoi(param_value);
					argv[4] = 1;
				}	else if (!strcmp(param_name, "min_supp_10000")) {
					status->sfs.global_min_supp = atoi(param_value);
					status->sfs.slide_min_supp = atoi(param_value);
					argv[5] = 1;
				}
			} 

		} /* while (rc==0) */
//Initialization starts
	for (int i=0; i<6 ; ++i)
		if (!argv[i]){
			fprintf(stderr,"Too few parameters. Agrv[%d] missing. ",i);
			return; //return -1000;// should be probably replaced with a fail() function.
		}
				
	status->sfs.global_min_supp = ceil(status->sfs.global_min_supp * status->sfs.window_size / 10000.0);
	status->sfs.slide_min_supp = ceil(status->sfs.slide_min_supp * status->sfs.slide_size / 10000.0);

	fprintf(stderr,"# status->sfs.global_min_supp=%d,status->sfs.slide_min_supp=%d,status->sfs.window_size=%d,status->sfs.slide_size=%d,status->sfs.L_delay_max=%d\n",status->sfs.global_min_supp,status->sfs.slide_min_supp,status->sfs.window_size,status->sfs.slide_size,status->sfs.L_delay_max);

	status->sfs.no_slides = status->sfs.window_size / status->sfs.slide_size;
	if (status->sfs.window_size != (status->sfs.no_slides*status->sfs.slide_size) || status->sfs.L_delay_max < 0 || status->sfs.L_delay_max >= status->sfs.no_slides){
		fprintf(stderr,"Error:status->sfs.slide_size must be a divisor of status->sfs.window_size.\n");
		return; //return -1000;	
	}
	
//Allocating memories and initialization	
	status->sfs.trans.items = (int*)malloc(sizeof(int)*status->sfs.no_items);
	status->sfs.archive_fpos = (long*)malloc(sizeof(long)*(status->sfs.no_slides+1));
	status->sfs.localFPs = (Tree **)malloc((status->sfs.no_slides+1)*sizeof(Tree *));
	for (int i=0; i<=status->sfs.no_slides; i++)
		status->sfs.localFPs[i] = new_tree(status->sfs.no_items);
	status->sfs.local_all_trans_len = (int *)malloc((status->sfs.no_slides+1)*sizeof(int));
//itemName is what we read/write from/in the input/output
//But itemNo is our ordering over single items
// In SWIM implementations we assumet the single item numbers exatly like the output of IBM 
// generator:	
//Basically, status->sfs.order[itemName] = itemNo	
//For the first scan, itemNo = status->sfs.order[itemName] = itemName
//Also recall that the status->sfs.order's status->sfs.index is always between 0 and status->sfs.no_items-1
//And that's why we do not say malloc(sizeof(int)*(status->sfs.no_items+1)
	status->sfs.order = (int*)malloc(sizeof(int)*(status->sfs.no_items));
	status->sfs.rev_order = (int*)malloc(sizeof(int)*(status->sfs.no_items));
	for (int i=0; i<status->sfs.no_items; i++){
		status->sfs.order[i] = i;
		status->sfs.rev_order[i] = i;
	}

//Notice that 0<= itemNo <= status->sfs.no_items-1
	status->sfs.patternTree = new_tree(status->sfs.no_items);
	status->sfs.temp_patternTree = new_tree(status->sfs.no_items);

//Initialization end
		int windowid;
    printf("Tran %d: ", cur_trans.length);
		for (int i=0; i<cur_trans.length; ++i)
			printf("%d ",cur_trans.pt[i]);
		printf("\n");
		status->sfs.StreamMillPtr += addTuple(cur_trans.length, cur_trans.pt, status->sfs.StreamMillBuffer, status->sfs.StreamMillPtr);
		if ( ((tid+1)%status->sfs.slide_size)==0 ){
			windowid = tid/status->sfs.slide_size;
			ProcessMain(windowid, &(status->sfs));
			status->sfs.StreamMillPtr = 0;
		}
	
	@
 }

	iterate: {
	@
		int windowid;

    printf("Tran %d: ", cur_trans.length);
		for (int i=0; i<cur_trans.length; ++i)
			printf("%d ",cur_trans.pt[i]);
		printf("\n");

		status->sfs.StreamMillPtr += addTuple(cur_trans.length, cur_trans.pt, status->sfs.StreamMillBuffer, status->sfs.StreamMillPtr);
		
		if ( ((tid+1)%status->sfs.slide_size)==0 ){
			windowid = tid/status->sfs.slide_size;
			ProcessMain(windowid, &(status->sfs));
			status->sfs.StreamMillPtr = 0;
		}
	
			
	@
	}

/*					 
 	expire: {
	@
		int windowid;
		if ( ((tid+1)%slide_size)==0 ){
			windowid = tid/slide_size;
			//ProcessExpire(windowid, &(status->sfs));
		}
	@
	}
*/

	terminate: {
	@
		/*
		cleanUp(&(status->sfs));
		*/
	@
	}

};


table swimparams(param_name char(100), param_value char(100)) memory;
table tdata(it int) memory;

/*
insert into swimparams values('trans_avg_len', '100'); 
insert into swimparams values('window_size', '6');
insert into swimparams values('slide_size', '2');
insert into swimparams values('no_items', '10');
insert into swimparams values('L_delay_max', '2');
insert into swimparams values('min_supp_10000', '0');

load FROM 'tmp.stream' into tdata;
*/


insert into swimparams values('trans_avg_len', '20'); 
insert into swimparams values('window_size', '20000');
insert into swimparams values('slide_size', '10000');
insert into swimparams values('no_items', '1000');
insert into swimparams values('L_delay_max', '1');
insert into swimparams values('min_supp_10000', '100');

load FROM '/tmp/sigkdd1.stream' into tdata;


select swimfis(t.tid, t.val)
from tdata, table(buildiext(it)) as t;


