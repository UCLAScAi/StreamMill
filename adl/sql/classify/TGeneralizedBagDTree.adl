table trainFlowers(id int, SL real, SW real, PL real, PW real, isSetosa int) memory;
table testFlowers(id int, SL real, SW real, PL real, PW real, isSetosa int) memory;

table activeEnsembles(ensId int) memory;
table ensClassTbl(ensId int, node int, col int, val int, nnVal int, isAccept int) memory;
table ensembleWeights(trainEns int, testEns int, correct int, total int) memory;
table params(a char(10), b char(10)) memory;


FUNCTION dissembleFlowers(v1 Int, v2 Int, v3 Int, v4 Int, classLbl Int):(col Int, val Int, classLbl Int)
{
   INSERT INTO RETURN VALUES (1, v1, classLbl), (2, v2, classLbl), (3, v3, classLbl), (4, v4, classLbl);
};



Aggregate ensDecisions(idi int, coli int, vali int, classLbli int, numColsi int, ensSize int):(testEnsId int, trainEnsId int, ido int, classLblo int, pred int) {
  table tuples(col int, val int) memory;
  table curEnsId(ensId int) memory;
  table curEnsCnt(cnt int) memory; 
  table temp(trainEns int, pred int) memory;

  Aggregate classifyTuple(trainEnsId int, statei int):(classLblo int) {
    initialize: iterate: {
      insert into return select nnVal
                         from ensClassTbl as a
                         where ensId = trainEnsId and a.isAccept = 1 and statei = a.node
                           and exists (select t.col from tuples as t where t.col = a.col and t.val = a.val);

      insert into return select classifyTuple(trainEnsId, nnVal)
                         from ensClassTbl as e
                         where ensId = trainEnsId and isAccept = 0 and statei = e.node
                           and SQLCODE <> 0 and exists(select t.col from tuples as t where t.col = e.col and t.val = e.val);

      insert into return values (-1) where not exists (select a.nnVal from ensClassTbl as a where a.ensId = trainEnsId and isAccept = 1 and a.node = statei)
                                and not exists (select e.nnVal from ensClassTbl as e where e.ensId = trainEnsId and isAccept = 0 and e.node=statei);
    }
  };

  Aggregate evaluateClassifier(trainEnsId int, idi int, coli int, vali int, numColsi int):(pred int) {
    /*table tuples(col int, val int) memory;*/


    initialize: iterate: {
      /*insert into tuples values(coli, vali);*/
      insert into return values((select classifyTuple(trainEnsId, 1))) where coli = numColsi;
      insert into return values(-1) where SQLCODE <> 0 and coli = numColsi;
      /*delete from tuples where coli = numColsi;*/
    }
  };

  initialize: {
    insert into tuples values(coli, vali);
    insert into curEnsId values(1);
    insert into curEnsCnt values(0);
  }
  iterate: {
    insert into tuples values(coli, vali);

    update curEnsCnt set cnt = cnt + 1 where coli = numColsi;

    insert into temp select a.ensId, evaluateClassifier(a.ensId, idi, col, val, numColsi)
                     from activeEnsembles as a, tuples
                     where coli = numColsi
                     group by a.ensId;

    insert into return select t.trainEns, b.ensId, idi, classLbli, t.pred
                     from temp as t, curEnsId as b
                     where coli = numColsi;
    delete from temp where coli = numColsi;
    
    update curEnsId set ensId = (ensId + 1)%20 where coli = numColsi and ensSize = (select cnt from curEnsCnt);
    update curEnsCnt set cnt = 0 where SQLCODE = 0;

    delete from tuples where coli = numColsi;
  }
};

table tempTable1(trainEns int, testEns int, id int, classLbl int, pred int) memory;
table tempTable2(trainEns int, testEns int, id int, classLbl int, pred int) memory;

Aggregate updateWeights(trainEnsi int, testEnsi int, classLbli int, predi int):(a int) {
  initialize: iterate: {
    /*
    insert into stdout values('here', trainEnsi, testEnsi, classLbli, predi);
    insert into stdout select trainEns, testEns, correct, total from ensembleWeights where trainEns = trainEnsi and testEns = testEnsi;
    */
    /*update ensembleWeights set correct = correct + 1 and total = total + 1
      where classLbli <> predi and trainEns = trainEnsi and testEns = testEnsi;
    insert into ensembleWeights values (trainEnsi, testEnsi, 0, 1) where SQLCODE <> 0 and classLbli <> predi;
    */

    update ensembleWeights set correct = correct + 1
      where trainEns = trainEnsi and testEns = testEnsi and classLbli = predi;
    insert into ensembleWeights values(trainEnsi, testEnsi, 1, 0) where SQLCODE <> 0 and classLbli = predi;

    update ensembleWeights set total = total+1 where trainEns = trainEnsi and testEns = testEnsi;
    insert into ensembleWeights values (trainEnsi, testEnsi, 0, 1) where SQLCODE <> 0 and classLbli <> predi;
    /*
    insert into stdout select trainEns, testEns, correct, total from ensembleWeights where trainEns = trainEnsi and testEns = testEnsi;
    */
  }
};

  Aggregate learnDTree(idi int, coli int, vali int, classLbli int, numColsi int, tWeighti int):(node int, col int, val int, nnVal int, isAccept int) {
    table tuples(id int, col int, val int, classLbl int, tWeight int) memory;
    table colStat(col int, val int, classLbl int, cnt int) memory;
    table clStat(col int, val int, classLbl int, cnt int) memory;
    table cnt(c int) memory;
    table assignedAttrs(col int, val int) memory;
    table nodeId(node int) memory;
    table pair(val int) memory;
    table equ(node int, col int, val int, nnVal int, isAccept int) memory;

    table entropy(col int, ent real) memory;
    table newCol(col int, i real) memory;

    Aggregate distinctPossibleVals(idi int, coli int, vali int, classLbli int):(a int, b int) {
      table dv(v int, c int) memory;
      table temp(t int) memory;
      initialize: iterate: {
        insert into temp select a.col from assignedAttrs as a, tuples as t where t.id = idi and a.col = t.col and a.val <> t.val;
        update dv set c = c + 1 where v = classLbli and (select count(1) from temp) = 0;
        insert into dv values(classLbli, 1) where SQLCODE <> 0
                                           and (select count(1) from temp) = 0;
        delete from temp;
      }
      terminate: {
        insert into return select v, c from dv;
      }
    };

    Aggregate calcEntropy(coli int, vali int, classLbli int):(col int, ent real) {
        table ce(col int, mult real, add real) memory;

        initialize: iterate: {
          update ce set mult = mult*(select cnt from clStat where col = coli and val = vali and classLbl = classLbli),
                        add = add+(select cnt from clStat where col = coli and val = vali and classLbl = classLbli)
              where col = coli and exists (select cnt from clStat where col = coli and val = vali and classLbl = classLbli);
          insert into ce values(coli, (select cnt from clStat where col = coli and val = vali and classLbl = classLbli),
                                      (select cnt from clStat where col = coli and val = vali and classLbl = classLbli))
              where SQLCODE <> 0 and exists (select cnt from clStat where col = coli and val = vali and classLbl = classLbli);
        }
        terminate: {
          insert into return select col, mult/add from ce;
        }
    };

    Aggregate computeEntropy(idi int, coli int, vali int, classLbli int, tWeighti int):(col int, ent Real) {
      table temp1 (t int) memory;

      initialize: iterate: {
        insert into temp1 select a.col from assignedAttrs as a, tuples as t where t.id = idi and a.col = t.col and a.val <> t.val;
        update clStat set cnt = cnt + tWeighti where col = coli and val = vali and classLbl = classLbli and
                                              (select count(1) from temp1) = 0;
        insert into clStat values(coli, vali, classLbli, tWeighti) where SQLCODE <> 0 and (select count(1) from temp1) = 0;
        delete from temp1;
      }
      terminate: {
        insert into return select calcEntropy(col, val, classLbl) from clStat;
        delete from clStat;
      }
    };

    AGGREGATE minpair(iPoint Int, iValue real): (mPoint Int, mValue real) {
      TABLE mvalue(value real) MEMORY;
      TABLE mpoints(point Int) MEMORY;
      INITIALIZE: {
        INSERT INTO mvalue VALUES (iValue);
        INSERT INTO mpoints VALUES(iPoint);
      }
      ITERATE: {
        UPDATE mvalue SET value = iValue WHERE iValue < value;
        DELETE FROM mpoints WHERE SQLCODE = 0;
        INSERT INTO mpoints SELECT iPoint FROM mvalue
             WHERE iValue =mvalue.value and SQLCODE = 0;
      }
      TERMINATE: {
        INSERT INTO RETURN SELECT point, value FROM mpoints, mvalue;
      }
    };

    Aggregate relearnDTree(nodei int, coli int, vali int):(a int) {
      table dVals(v int, cnt int) memory;
      table temp(n int, c int, v int) memory;
      table entropy1(col int, ent real) memory;
      initialize: iterate: {
        delete from entropy where 1 = 1;
        delete from entropy1 where 1 = 1;
        delete from newCol where 1 = 1;
        insert into assignedAttrs values(coli, vali);

        insert into dVals select distinctPossibleVals(id, col, val, classLbl) from tuples;
        insert into equ values(nodei, coli, vali, (select node+1 from nodeId), 0)
                        where (select count(1) from dVals) > 1;
        update nodeId set node = node+1 where SQLCODE = 0;
  
        insert into equ values(nodei, coli, vali, (select v from dVals), 1) where SQLCODE <> 0;
        insert into equ values(nodei, coli, vali, -1, 1) where (select count(1) from dVals) = 0;


        insert into entropy select computeEntropy(id, col, val, classLbl, tWeight) from tuples as c
          where (select count(1) from dVals) > 1
          and not exists (select a.col from assignedAttrs as a where a.col = c.col);

        insert into entropy1 select col, ent from entropy as e where not exists(select a.col from assignedAttrs as a where a.col = e.col);
  
        insert into equ values(nodei, coli, vali, (select v from dVals where cnt = (select max(cnt) from dVals)), 1)
                        where (select count(1) from dVals) > 1 and (select count(1) from entropy1) = 0;
        delete from equ where node = nodei and col = coli and val = vali and isAccept = 0 and SQLCODE = 0;

        insert into newCol select minpair(col, ent) from entropy1 where (select count(1) from dVals) > 1;

        insert into temp select ni.node, c.col, c.val from colStat as c, newCol as n, nodeId as ni where c.col = n.col and (select count(1) from dVals) > 1 group by ni.node, c.col, c.val;

        select relearnDTree(n, c, v) from temp;

        delete from assignedAttrs where col = coli and val = vali;
        delete from dVals;
        delete from temp;
      }
    };

    initialize: {
      insert into tuples values(idi, coli, vali, classLbli, tWeighti);
      insert into colStat values(coli, vali, classLbli, tWeighti);
    }
    iterate: {
      insert into tuples values(idi, coli, vali, classLbli, tWeighti);
      update colStat set cnt = cnt+tWeighti where col = coli and val = vali and classLbl = classLbli;
      insert into colStat values(coli, vali, classLbli, tWeighti) where SQLCODE <> 0;
    }
    terminate: {
      insert into nodeId values(1);
 
      insert into entropy select computeEntropy(id, col, val, classLbl, tWeight) from tuples;
 
   
      insert into newCol select minpair(col, ent) from entropy;
      insert into pair select val from colStat as c, newCol as n where c.col = n.col group by val;
    
      select relearnDTree(1, n.col, p.val) from newCol as n, pair as p;
      insert into return select node, col, val, nnVal, isAccept from equ;
    }
  };

Aggregate buildManageEnsClassifiers(idi int, coli int, vali int, lbli int, numColsi int, tWeighti int, ensSize int):(a int) {
  table curEnsId(ensId int) memory;
  table curEnsCnt(cnt int) memory;
  table tuples(id int, col int, val int, lbl int, tWeight int) memory;
  table temp(node int, col int, val int, nnVal int, isAccept int) memory;


  initialize: iterate: {
    insert into tuples values(idi, coli, vali, lbli, tWeighti);

    update curEnsCnt set cnt = cnt + 1 where coli = numColsi;
    insert into curEnsCnt values(1) where SQLCODE <> 0 and coli = numColsi;

    /*insert into stdout values('cnt') where coli = numColsi;
    insert into stdout select cnt from curEnsCnt where coli = numColsi;
    */

    update curEnsId set ensId = ((ensId+1)%20) where (select cnt from curEnsCnt) = ensSize and coli = numColsi;
    insert into curEnsId values(1) where SQLCODE <> 0 and coli = numColsi and (select cnt from curEnsCnt) = ensSize;
    /*
    insert into stdout values('just inserted') where SQLCODE = 0;
    insert into stdout values('curEnsId') where coli = numColsi;
    insert into stdout select ensId from curEnsId where coli = numColsi;
    */

    insert into activeEnsembles select ensId from curEnsId
    where coli = numColsi and not exists (select ensId from activeEnsembles where ensId = (select ensId from curEnsId)) 
          and (Select cnt from curEnsCnt) = ensSize;
    insert into stdout values('inserted') where SQLCODE = 0 and 1<>1;
    insert into stdout select ensId from activeEnsembles where SQLCODE = 0 and 1<>1;

    delete from ensClassTbl where coli = numColsi and (select count(1) from curEnsId) > 0 and ensId = (select ensId from curEnsId) and (select cnt from curEnsCnt) = ensSize;
    delete from ensembleWeights where coli = numColsi and (select cnt from curEnsCnt) = ensSize and trainEns = (select ensId from curEnsId);
    delete from ensembleWeights where coli = numColsi and (select cnt from curEnsCnt) = ensSize and testEns = (select ensId from curEnsId);
    
    

    insert into temp select learnDTree(id, col, val, lbl, numColsi, tWeight) 
                     from tuples
                     where coli = numColsi and (select cnt from curEnsCnt) = ensSize;
   
    insert into stdout values('aaa') where coli = numColsi and (Select cnt from curEnsCnt) = ensSize and 1 <> 1;
    insert into ensClassTbl select ensId, node, col, val, nnVal, isAccept
                            from temp, curEnsId
                            where coli = numColsi and 
                              (select cnt from curEnsCnt) = ensSize;

    delete from tuples where coli = numColsi and (select cnt from curEnsCnt) = ensSize;
    delete from temp where coli = numColsi and (select cnt from curEnsCnt) = ensSize;
    update curEnsCnt set cnt = 0 where coli = numColsi and (select cnt from curEnsCnt) = ensSize;
  }
};


Aggregate voting(trainEnsi int, testEnsi int, idi int, classLbli int, predi int):(ido int, classLblo int, predo int) {
  table soFar(lbl int, p real) memory;
  table curId(id int, lbl int) memory;
  table temp(pred int) memory;

  aggregate updateSoFar(lbli int, pi real):int {
    /*unused table, to solve a bug tht seg faults when there are not decs */
    table a(b int) memory;
    initialize: iterate: {
      update soFar set p = p + pi where lbl = lbli;
      insert into soFar values(lbli, pi) where SQLCODE <> 0;
    }
  };
  
  aggregate mmaxPair(lbli int, pi real):(lblo int) {
    table mSoFar(lbl int, p real) memory;
    initialize: {
      insert into mSoFar values(lbli, pi);
    }
    iterate: {
      update mSoFar set lbl = lbli, p = pi where p < pi;
    }
    terminate: {
      insert into return select lbl from mSoFar;
    }
  };

  initialize: {
    insert into curId values(idi, classLbli);
    select updateSoFar(predi, (1.0*correct)/total)
    from ensembleWeights where trainEnsi = trainEns and testEnsi = testEns;
  }
  iterate: {
    insert into temp select mmaxPair(lbl, p) from soFar where idi <> (select id from curId);
    insert into return select id, lbl, pred from temp, curId where SQLCODE = 0;

    delete from curId where id <> idi;
    insert into curId values(idi, classLbli) where SQLCODE = 0;
    delete from soFar where SQLCODE = 0;
    delete from temp where SQLCODE = 0;

    select updateSoFar(predi, correct/total)
    from ensembleWeights where trainEnsi = trainEns and testEnsi = testEns;
  }
};

create modeltype EnsembleBag {
  sharedtables(tuples,ensembleId,activeEnsembles,ensClassTbl,ensembleWeights),
  PartitionEns (uda partitionEns,
         window false,
         partables(params),
         parameters()
        ),
  Train (uda learnDTree,
         window false,
         partables(params),
         parameters()
        ),
  ManageEns (uda buildManageEnsClassifiers,
         window false,
         partables(params),
         parameters()
        ),
  Classify (uda ensDecisions,
         window false,
         partables(params),
         parameters()
        ),
  ManageWeights (uda updateWeights,
         window false,
         partables(params),
         parameters()
        ),
  Voting (uda voting,
         window false,
         partables(params),
         parameters()
        )
};

/* Given a model as above, we first partition the incoming training stream 
   into ensembles (PartitionEns). Then, we Train a new classifier over 
   these ensemble tuples. 
   Then, we call ManageEns to manage the stored classifiers.
   Then, we Classify each ensemble tuple with each existing classifier and
   ManageWeights of the classifier.

   We first Classify the testing tuples
   with each stored classifier and perform weighted Voting among the ensembles.
*/

load from '/home/hthakkar/adl/sql/clsf/iris2.data' into trainFlowers;
load from '/home/hthakkar/adl/sql/clsf/iris2.data' into testFlowers;


/* query */
select buildManageEnsClassifiers(id, d.col, d.val, d.classLbl, 4, 1, 15) 
            from trainFlowers, table(dissembleFlowers(SL, SW, PL, PW, isSetosa)) as d;
select ensId from activeEnsembles;
insert into stdout values('classifiers');
select ensId, node, col, val, nnVal, isAccept from ensClassTbl;
insert into stdout values('done classifiers');


/* query */
insert into tempTable1 select ensDecisions(id, d.col, d.val, d.classLbl, 4, 15) 
            from trainFlowers, TABLE(dissembleFlowers(SL, SW, PL, PW, isSetosa)) as d;

/*
insert into stdout values('table1');
select trainEns, testEns, id, classLbl, pred from tempTable1;
*/

/* query */
select updateWeights(trainEns, testEns, classLbl, pred) from tempTable1;


/* query */
insert into tempTable2 select ensDecisions(id, d.col, d.val, d.classLbl, 4, 15) 
            from testFlowers, TABLE(dissembleFlowers(SL, SW, PL, PW, isSetosa)) as d;

/*
select trainEns, testEns, correct, total from ensembleWeights;

insert into stdout values('table2');
select trainEns, testEns, id, classLbl, pred from tempTable2;
*/

/* query */
select voting(trainEns, testEns, id, classLbl, pred)
from tempTable2;

insert into stdout values('Done!!!!!!!');
