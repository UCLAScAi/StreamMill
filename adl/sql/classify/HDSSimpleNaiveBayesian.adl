table hd(id int, a1 int, b1 int, c1 int, d1 int, e1 int, f1 int, g1 int, h1 int,
         i1 int, j1 int, k1 int, l1 int, m1 int, classLbl int) memory;
table hd1(id int, a1 int, b1 int, c1 int, d1 int, e1 int, f1 int, g1 int,
         h1 int, i1 int, j1 int, k1 int, l1 int, m1 int, classLbl int) memory;

function dissemble(a1 int, b1 int, c1 int, d1 int, e1 int, f1 int,  
         g1 int, h1 int, i1 int, j1 int, k1 int, l1 int, m1 int, classLbl int) :
           (col int, val int, classLbl int)
{
   INSERT INTO RETURN VALUES (1, a1/2, classLbl), (2, b1, classLbl), 
                             (3, c1, classLbl), (4, d1/5, classLbl),
                             (5, e1/5, classLbl), (6, f1, classLbl),
                             (7, g1, classLbl), (8, h1/5, classLbl),
                             (9, i1, classLbl), (10, j1, classLbl),
                             (11, k1, classLbl), (12, l1, classLbl),
                             (13, m1, classLbl);
   /*INSERT INTO RETURN VALUES (1, a1/10, classLbl), (2, b1, classLbl), 
                             (3, c1, classLbl), (4, d1/30, classLbl),
                             (5, e1/40, classLbl), (6, f1, classLbl),
                             (7, g1, classLbl), (8, h1/30, classLbl),
                             (9, i1, classLbl), (10, j1, classLbl),
                             (11, k1, classLbl), (12, l1, classLbl),
                             (13, m1, classLbl);
   */
};

CAggregate learnClassifier(coli int, vali int, classLbli int, numColsi int):(a int) {
  @
    /* global c stuff here */
    static int cnt = 0;
    static hash_map<int, int, hash<int> >* classStat = new hash_map<int, int, hash<int> >;
    static hash_map<int, hash_map<int, hash_map<int, int, hash<int> >*, hash<int> >*, hash<int> >* colStat = new hash_map<int, hash_map<int, hash_map<int, int, hash<int> >*, hash<int> >*, hash<int> >;
  @

  /* can put other ESL stuff like tables etc here, will be put in status */
  table abc(a int) memory;  #just for example

  @
    /* things to put in the status structure here */
  @

  initialize: iterate: {
    @
        /* Random c code here -- init*/
        //printf("here %d %d %d %d %d\n", coli, vali, classLbli, status->classStat, status->colStat);
        if(coli==numColsi)
          cnt++;

        if(classStat->operator[](classLbli)) {
          classStat->operator[](classLbli) += 1;
        }
        else {
          classStat->operator[](classLbli) = 1;
        }

        if(colStat->operator[](coli)) {
          if(colStat->operator[](coli)->operator[](vali)) {
            if(colStat->operator[](coli)->operator[](vali)->operator[](classLbli)) {
              colStat->operator[](coli)->operator[](vali)->operator[](classLbli) += 1;
            }
            else {
              colStat->operator[](coli)->operator[](vali)->operator[](classLbli) = 1;
            }
          }
          else {
            colStat->operator[](coli)->operator[](vali) = new hash_map<int, int, hash<int> >;
            colStat->operator[](coli)->operator[](vali)->operator[](classLbli) = 1;
          }
        }
        else {
          colStat->operator[](coli) = new hash_map<int, hash_map<int, int, hash<int> >*, hash<int> >;
          colStat->operator[](coli)->operator[](vali) = new hash_map<int, int, hash<int> >;
          colStat->operator[](coli)->operator[](vali)->operator[](classLbli) = 1;
        }
    @
  }
};


CAggregate evaluateClassifier(idi int, coli int, vali int, numColsi int, classLbli int):(ido int, classLblo int, classo int) {
  @
    /* global c stuff here */
    static hash_map<int, double, hash<int> >* tclassStat = new hash_map<int, double, hash<int> >;
  @

  /* can put other ESL stuff like tables etc here, will be put in status */
  table abc(a int) memory;  #just for example

  @
    /* things to put in the status structure here */
  @

  initialize: iterate: {
    @
      if(coli == 1) {
        for(hash_map<int, int, hash<int> >::iterator iter = classStat->begin();
              iter != classStat->end(); ++iter) {
          pair<int, int> p(*iter);
          tclassStat->operator[](p.first) = ((double)p.second)/cnt;
        }
      }
      for(hash_map<int, int, hash<int> >::iterator iter = classStat->begin();
            iter != classStat->end(); ++iter) {
        pair<int, int> p(*iter);
        if(colStat->operator[](coli)) {
          if(colStat->operator[](coli)->operator[](vali)) {
            if(colStat->operator[](coli)->operator[](vali)->operator[](p.first)) {
              tclassStat->operator[](p.first) = tclassStat->operator[](p.first)*
                                                  colStat->operator[](coli)->operator[](vali)->operator[](p.first)/classStat->operator[](p.first);
            }
            else {
              tclassStat->operator[](p.first) = 0;
            }
          }
          else {
            tclassStat->operator[](p.first) = 0;
          }
        }
        else {
          tclassStat->operator[](p.first) = 0;
        }
      }
      if(coli == numColsi) {
        double mx=0;
        int cls=-1;
        for(hash_map<int, double, hash<int> >::iterator iter = tclassStat->begin();
              iter != tclassStat->end(); ++iter) {
          pair<int, double> p(*iter);
          if(p.second > mx) {
            mx = p.second;
            cls = p.first;
          }
        }
        if(mx==0) cls = -1;
        /* output results here */
        memset(&key, 0, sizeof(key));
        memset(&data, 0, sizeof(data));
        data.data = datadata;
        key.data = keydata;
        memcpy((char*)data.data+0, &idi, sizeof(int));
        memcpy((char*)data.data+4, &classLbli, sizeof(int));
        memcpy((char*)data.data+8, &cls, sizeof(int));
        data.size = 12;
        key.size = 0;
        if ((rc = status->ret->put(status->ret, &key, &data, DB_APPEND))!=0) {
          adlabort(rc, "IM_REL->put()");
        }

      }
    @
  }
};

table mt(id int, c int, d int) memory;

load from '/home/hthakkar/adl/sql/clsf/hd1.txt' into hd;
load from '/home/hthakkar/adl/sql/clsf/hd1.txt' into hd1;

/*select a1/2, b1, c1, d1/5, e1/5, f1, g1, h1/5, i1, j1, k1, l1, m1, classLbl from hd;
*/


select learnClassifier(d.col, d.val, d.classLbl, 13)
from hd, table(dissemble(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, classLbl)) as d;

/*
insert into mt select evaluateClassifier(id, d.col, d.val, 13, d.classLbl)
from hd1, table(dissemble(a1, b1, c1, d1, e1, f1, g1, h1, i1, j1, k1, l1, m1, classLbl)) as d;

select count(1) from mt where c=d;
*/

/*select learnClassifier(d.col, d.val, d.classLbl, 4)
from  flowers, TABLE(dissembleFlowers(SL, SW, PL, PW, isSetosa)) AS d;

select evaluateClassifier(id, d.col, d.val, 4, d.classLbl)
from  flowers1, TABLE(dissembleFlowers(SL, SW, PL, PW, isSetosa)) AS d;
*/

