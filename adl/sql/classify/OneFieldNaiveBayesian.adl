table flowers(id int, SL real, SW real, PL real, PW real, isSetosa int) memory;
table flowers1(id int, SL real, SW real, PL real, PW real, isSetosa int) memory;
table abc(a int, b int, c int) memory;

FUNCTION dissembleFlowers(v1 Int, v2 Int, v3 Int, v4 Int, classLbl Int):(val Int, classLbl Int)
{
   INSERT INTO RETURN VALUES (v1, classLbl), (v2, classLbl), (v3, classLbl), (v4, classLbl);
};

CAggregate learnClassifier(vali int, classLbli int, numColsi int):(a int) {
  @
    /* global c stuff here */
    static int cnt = 0;
    static int coli;
    static hash_map<int, int, hash<int> >* classStat = new hash_map<int, int, hash<int> >;
    static hash_map<int, hash_map<int, hash_map<int, int, hash<int> >*, hash<int> >*, hash<int> >* colStat = new hash_map<int, hash_map<int, hash_map<int, int, hash<int> >*, hash<int> >*, hash<int> >;
  @

  /* can put other ESL stuff like tables etc here, will be put in status */
  table abc(a int) memory;  #just for example

  @
    /* things to put in the status structure here */
  @

  initialize: iterate: {
    @
        /* Random c code here -- init*/
        coli++;
        //printf("here %d %d %d %d %d\n", coli, vali, classLbli, status->classStat, status->colStat);
        if(coli==numColsi)
          cnt++;

        if(classStat->operator[](classLbli)) {
          classStat->operator[](classLbli) += 1;
        }
        else {
          classStat->operator[](classLbli) = 1;
        }

        if(colStat->operator[](coli)) {
          if(colStat->operator[](coli)->operator[](vali)) {
            if(colStat->operator[](coli)->operator[](vali)->operator[](classLbli)) {
              colStat->operator[](coli)->operator[](vali)->operator[](classLbli) += 1;
            }
            else {
              colStat->operator[](coli)->operator[](vali)->operator[](classLbli) = 1;
            }
          }
          else {
            colStat->operator[](coli)->operator[](vali) = new hash_map<int, int, hash<int> >;
            colStat->operator[](coli)->operator[](vali)->operator[](classLbli) = 1;
          }
        }
        else {
          colStat->operator[](coli) = new hash_map<int, hash_map<int, int, hash<int> >*, hash<int> >;
          colStat->operator[](coli)->operator[](vali) = new hash_map<int, int, hash<int> >;
          colStat->operator[](coli)->operator[](vali)->operator[](classLbli) = 1;
        }
        if(coli == numColsi) coli=0;
    @
  }
};


CAggregate evaluateClassifier(idi int, vali int, numColsi int, classLbli int):(ido int, classLblo int, classo int) {
  @
    /* global c stuff here */
    static hash_map<int, double, hash<int> >* tclassStat = new hash_map<int, double, hash<int> >;
  @

  /* can put other ESL stuff like tables etc here, will be put in status */
  table abc(a int) memory;  #just for example

  @
    /* things to put in the status structure here */
  @

  initialize: iterate: {
    @
      coli++;
      if(coli == 1) {
        for(hash_map<int, int, hash<int> >::iterator iter = classStat->begin();
              iter != classStat->end(); ++iter) {
          pair<int, int> p(*iter);
          tclassStat->operator[](p.first) = ((double)p.second)/cnt;
        }
      }
      for(hash_map<int, int, hash<int> >::iterator iter = classStat->begin();
            iter != classStat->end(); ++iter) {
        pair<int, int> p(*iter);
        if(colStat->operator[](coli)) {
          if(colStat->operator[](coli)->operator[](vali)) {
            if(colStat->operator[](coli)->operator[](vali)->operator[](p.first)) {
              tclassStat->operator[](p.first) = tclassStat->operator[](p.first)*
                                                  colStat->operator[](coli)->operator[](vali)->operator[](p.first)/classStat->operator[](p.first);
            }
            else {
              tclassStat->operator[](p.first) = 0;
            }
          }
          else {
            tclassStat->operator[](p.first) = 0;
          }
        }
        else {
          tclassStat->operator[](p.first) = 0;
        }
      }
      if(coli == numColsi) {
        double mx=0;
        int cls=-1;
        for(hash_map<int, double, hash<int> >::iterator iter = tclassStat->begin();
              iter != tclassStat->end(); ++iter) {
          pair<int, double> p(*iter);
          if(p.second > mx) {
            mx = p.second;
            cls = p.first;
          }
        }
        if(mx==0) cls = -1;
        /* output results here */
        memset(&key, 0, sizeof(key));
        memset(&data, 0, sizeof(data));
        data.data = datadata;
        key.data = keydata;
        memcpy((char*)data.data+0, &idi, sizeof(int));
        memcpy((char*)data.data+4, &classLbli, sizeof(int));
        memcpy((char*)data.data+8, &cls, sizeof(int));
        data.size = 12;
        key.size = 0;
        if ((rc = status->ret->put(status->ret, &key, &data, DB_APPEND))!=0) {
          adlabort(rc, "IM_REL->put()");
        }
        coli = 0;
      }
    @
  }
};


load from '/home/hthakkar/adl/sql/clsf/iris1.data' into flowers;
load from '/home/hthakkar/adl/sql/clsf/iris1.data' into flowers1;

select learnClassifier(d.val, d.classLbl, 4)
from  flowers, TABLE(dissembleFlowers(SL, SW, PL, PW, isSetosa)) AS d;

select evaluateClassifier(id, d.val, 4, d.classLbl)
from  flowers1, TABLE(dissembleFlowers(SL, SW, PL, PW, isSetosa)) AS d;

