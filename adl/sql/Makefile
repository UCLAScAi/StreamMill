# Makefile.in generated by automake 1.10.1 from Makefile.am.
# sql/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.







pkgdatadir = $(datadir)/adl
pkglibdir = $(libdir)/adl
pkgincludedir = $(includedir)/adl
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
bin_PROGRAMS = eslc$(EXEEXT) adlc$(EXEEXT) atlaswin_test$(EXEEXT) \
	esl_start$(EXEEXT) eslt$(EXEEXT) testq$(EXEEXT)
subdir = sql
DIST_COMMON = $(include_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
am__installdirs = "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" \
	"$(DESTDIR)$(bindir)" "$(DESTDIR)$(includedir)"
libLIBRARIES_INSTALL = $(INSTALL_DATA)
LIBRARIES = $(lib_LIBRARIES)
AR = ar
ARFLAGS = cru
libatlas_a_AR = $(AR) $(ARFLAGS)
libatlas_a_DEPENDENCIES = /usr/local/lib/libmm.a \
	../im_db/hash-arbitrary.o
am_libatlas_a_OBJECTS = adllib.$(OBJEXT) atlaswin.$(OBJEXT) \
	adl_yacc.$(OBJEXT) lex.$(OBJEXT) absyn.$(OBJEXT) \
	sql_rewrite.$(OBJEXT) oid_rewrite.$(OBJEXT) semant.$(OBJEXT) \
	bind.$(OBJEXT) sqlsem.$(OBJEXT) builtin.$(OBJEXT) \
	udf.$(OBJEXT) semant_aggr.$(OBJEXT) aggr_info.$(OBJEXT) \
	table.$(OBJEXT) trans2C.$(OBJEXT) symbol.$(OBJEXT) \
	SMLog.$(OBJEXT) types.$(OBJEXT) env.$(OBJEXT) \
	adl_sys.$(OBJEXT) io.$(OBJEXT) adl_obj.$(OBJEXT) \
	util.$(OBJEXT) list.$(OBJEXT) err.$(OBJEXT) getopt.$(OBJEXT) \
	getopt1.$(OBJEXT) GUIClient.$(OBJEXT) buffer.$(OBJEXT) \
	winbuf.$(OBJEXT) dbt.$(OBJEXT) querySchdl.$(OBJEXT) \
	driver.$(OBJEXT) monitor.$(OBJEXT) strategy.$(OBJEXT) \
	stmt.$(OBJEXT) compiler.$(OBJEXT) windowBuf.$(OBJEXT) \
	ios.$(OBJEXT)
libatlas_a_OBJECTS = $(am_libatlas_a_OBJECTS)
libswimfis_a_AR = $(AR) $(ARFLAGS)
libswimfis_a_LIBADD =
am_libswimfis_a_OBJECTS = swimlib.$(OBJEXT) fptree.$(OBJEXT) \
	histmgr.$(OBJEXT) memmgr.$(OBJEXT) timeval.$(OBJEXT)
libswimfis_a_OBJECTS = $(am_libswimfis_a_OBJECTS)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_adlc_OBJECTS = adlc.$(OBJEXT)
adlc_OBJECTS = $(am_adlc_OBJECTS)
adlc_DEPENDENCIES = libatlas.a ../im_db/libimdb.a ../dbug/libdbug.a \
	/usr/local/lib/libmm.a ../BerkeleyDB/lib/libdb.a
am_atlaswin_test_OBJECTS = atlaswin_test.$(OBJEXT)
atlaswin_test_OBJECTS = $(am_atlaswin_test_OBJECTS)
atlaswin_test_DEPENDENCIES = ./libatlas.a
am_esl_start_OBJECTS = esl.$(OBJEXT)
esl_start_OBJECTS = $(am_esl_start_OBJECTS)
esl_start_DEPENDENCIES = libatlas.a ../im_db/libimdb.a \
	/usr/local/lib/libmm.a ../dbug/libdbug.a \
	../BerkeleyDB/lib/libdb.a
am_eslc_OBJECTS = eslc.$(OBJEXT)
eslc_OBJECTS = $(am_eslc_OBJECTS)
eslc_DEPENDENCIES = libatlas.a ../im_db/libimdb.a \
	/usr/local/lib/libmm.a ../dbug/libdbug.a \
	../BerkeleyDB/lib/libdb.a
am_eslt_OBJECTS = eslt.$(OBJEXT)
eslt_OBJECTS = $(am_eslt_OBJECTS)
eslt_DEPENDENCIES = libatlas.a ../im_db/libimdb.a \
	/usr/local/lib/libmm.a ../dbug/libdbug.a \
	../BerkeleyDB/lib/libdb.a
am_testq_OBJECTS = testq.$(OBJEXT)
testq_OBJECTS = $(am_testq_OBJECTS)
testq_DEPENDENCIES = libatlas.a ../BerkeleyDB/lib/libdb.a \
	../im_db/libimdb.a ../rtree/librtree.a /usr/local/lib/libmm.a \
	../dbug/libdbug.a
binSCRIPT_INSTALL = $(INSTALL_SCRIPT)
SCRIPTS = $(bin_SCRIPTS)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
SOURCES = $(libatlas_a_SOURCES) $(libswimfis_a_SOURCES) \
	$(adlc_SOURCES) $(atlaswin_test_SOURCES) $(esl_start_SOURCES) \
	$(eslc_SOURCES) $(eslt_SOURCES) $(testq_SOURCES)
DIST_SOURCES = $(libatlas_a_SOURCES) $(libswimfis_a_SOURCES) \
	$(adlc_SOURCES) $(atlaswin_test_SOURCES) $(esl_start_SOURCES) \
	$(eslc_SOURCES) $(eslt_SOURCES) $(testq_SOURCES)
includeHEADERS_INSTALL = $(INSTALL_HEADER)
HEADERS = $(include_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = aclocal-1.10
ALLOCA = 
AMTAR = tar
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.10
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = -DSWIM
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lm -ldl 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = makeinfo
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = adl
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.5
YACC = bison -y
# AM_CFLAGS = -g
# AM_CXXFLAGS = -g
YFLAGS = -d
abs_builddir = /home/training/workspace/SMMServer/adl/sql
abs_srcdir = /home/training/workspace/SMMServer/adl/sql
abs_top_builddir = /home/training/workspace/SMMServer/adl
abs_top_srcdir = /home/training/workspace/SMMServer/adl
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build_alias = 
builddir = .

#adl_yacc.h: adl_yacc.cc
datadir = $(prefix)/@DATADIRNAME@
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host_alias = 
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/training/workspace/SMMServer/adl/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_builddir = ..
top_srcdir = ..
CPP_FLAGS = -Wno-deprecated
SUFFIXES = .grm .c .o
bin_SCRIPTS = adlcc eslcc
lib_LIBRARIES = libatlas.a libswimfis.a
eslc_SOURCES = esl/eslc.cc
eslc_LDADD = libatlas.a ../im_db/libimdb.a /usr/local/lib/libmm.a ../dbug/libdbug.a -ldl ../BerkeleyDB/lib/libdb.a
esl_start_SOURCES = esl/esl.cc 
esl_start_LDADD = libatlas.a ../im_db/libimdb.a /usr/local/lib/libmm.a ../dbug/libdbug.a -ldl ../BerkeleyDB/lib/libdb.a
eslt_SOURCES = esl/eslt.cc
eslt_LDADD = libatlas.a ../im_db/libimdb.a /usr/local/lib/libmm.a ../dbug/libdbug.a -ldl ../BerkeleyDB/lib/libdb.a
testq_SOURCES = esl/testq.cc
testq_LDADD = libatlas.a ../BerkeleyDB/lib/libdb.a ../im_db/libimdb.a ../rtree/librtree.a /usr/local/lib/libmm.a ../dbug/libdbug.a -ldl
libswimfis_a_SOURCES = uda-swim/common/fptree.h uda-swim/common/memmgr.h uda-swim/common/histmgr.h uda-swim/common/timeval.h uda-swim/swimlib.c uda-swim/common/fptree.c uda-swim/common/histmgr.c uda-swim/common/memmgr.c uda-swim/common/timeval.c
libatlas_a_SOURCES = adllib.cc atlaswin.cc adllib.h atlaswin.h adl_yacc.cc lex.cc absyn.cc sql_rewrite.cc oid_rewrite.cc semant.cc bind.cc sqlsem.cc builtin.cc udf.cc semant_aggr.cc aggr_info.cc table.cc trans2C.cc symbol.cc SMLog.cc types.cc env.cc adl_sys.cc io.cc adl_obj.cc util.cc list.cc err.cc getopt.c getopt1.c err.h  getopt.h io.h lex.h list.h adl_obj.h adl_sys.h system.h absyn.h trans2C.h const.h irtree.h semant.h aggr_info.h table.h types.h env.h temp.h util.h symbol.h SMLog.h adlhash.h atlaswin.h basic.h esl/GUIClient.cc esl/buffer.cc winbuf.cc esl/dbt.cc esl/querySchdl.cc esl/driver.cc esl/monitor.cc esl/strategy.cc esl/stmt.cc esl/compiler.cc esl/windowBuf.cc esl/ios/ios.cc
libatlas_a_LIBADD = /usr/local/lib/libmm.a ../im_db/hash-arbitrary.o
adlc_SOURCES = adlc.cc
adlc_LDADD = libatlas.a ../im_db/libimdb.a ../dbug/libdbug.a /usr/local/lib/libmm.a ../BerkeleyDB/lib/libdb.a
atlaswin_test_SOURCES = atlaswin_test.cc 
atlaswin_test_LDADD = ./libatlas.a
include_HEADERS = ../BerkeleyDB/include/db.h adlhash.h atlaswin.h adllib.h esl/buffer.h winbuf.h esl/stmt.h types.h const.h abstypes.h absyn.h adlhash.h adllib.h adl_obj.h adl_sys.h adl_yacc.h basic.h env.h err.h getopt.h heap.h io.h irtree.h lex.h list.h semant.h sql_rewrite.h symbol.h SMLog.h system.h table.h trans2C.h translate.h util.h win.h esl/compiler.h esl/dbt.h esl/driver.h esl/monitor.h esl/strategy.h esl/GUIClient.h esl/querySchdl.h esl/ios/ios.h esl/windowBuf.h uda-swim/swimlib.h uda-swim/common/fptree.h  uda-swim/common/memmgr.h uda-swim/common/histmgr.h  uda-swim/common/timeval.h
EXTRA_DIST = adl_yacc.grm Makefile.win
INCLUDES = -I../rtree -I../im_db -I../BerkeleyDB/include -Iuda-swim -Iuda-swim/common -Iesl -I../dbug -I.
all: all-am

.SUFFIXES:
.SUFFIXES: .grm .c .o .cc .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  sql/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  sql/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    f=$(am__strip_dir) \
	    echo " $(libLIBRARIES_INSTALL) '$$p' '$(DESTDIR)$(libdir)/$$f'"; \
	    $(libLIBRARIES_INSTALL) "$$p" "$(DESTDIR)$(libdir)/$$f"; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    p=$(am__strip_dir) \
	    echo " $(RANLIB) '$(DESTDIR)$(libdir)/$$p'"; \
	    $(RANLIB) "$(DESTDIR)$(libdir)/$$p"; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  p=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(libdir)/$$p'"; \
	  rm -f "$(DESTDIR)$(libdir)/$$p"; \
	done

clean-libLIBRARIES:
	-test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)
libatlas.a: $(libatlas_a_OBJECTS) $(libatlas_a_DEPENDENCIES) 
	-rm -f libatlas.a
	$(libatlas_a_AR) libatlas.a $(libatlas_a_OBJECTS) $(libatlas_a_LIBADD)
	$(RANLIB) libatlas.a
libswimfis.a: $(libswimfis_a_OBJECTS) $(libswimfis_a_DEPENDENCIES) 
	-rm -f libswimfis.a
	$(libswimfis_a_AR) libswimfis.a $(libswimfis_a_OBJECTS) $(libswimfis_a_LIBADD)
	$(RANLIB) libswimfis.a
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
adlc$(EXEEXT): $(adlc_OBJECTS) $(adlc_DEPENDENCIES) 
	@rm -f adlc$(EXEEXT)
	$(CXXLINK) $(adlc_OBJECTS) $(adlc_LDADD) $(LIBS)
atlaswin_test$(EXEEXT): $(atlaswin_test_OBJECTS) $(atlaswin_test_DEPENDENCIES) 
	@rm -f atlaswin_test$(EXEEXT)
	$(CXXLINK) $(atlaswin_test_OBJECTS) $(atlaswin_test_LDADD) $(LIBS)
esl_start$(EXEEXT): $(esl_start_OBJECTS) $(esl_start_DEPENDENCIES) 
	@rm -f esl_start$(EXEEXT)
	$(CXXLINK) $(esl_start_OBJECTS) $(esl_start_LDADD) $(LIBS)
eslc$(EXEEXT): $(eslc_OBJECTS) $(eslc_DEPENDENCIES) 
	@rm -f eslc$(EXEEXT)
	$(CXXLINK) $(eslc_OBJECTS) $(eslc_LDADD) $(LIBS)
eslt$(EXEEXT): $(eslt_OBJECTS) $(eslt_DEPENDENCIES) 
	@rm -f eslt$(EXEEXT)
	$(CXXLINK) $(eslt_OBJECTS) $(eslt_LDADD) $(LIBS)
testq$(EXEEXT): $(testq_OBJECTS) $(testq_DEPENDENCIES) 
	@rm -f testq$(EXEEXT)
	$(CXXLINK) $(testq_OBJECTS) $(testq_LDADD) $(LIBS)
install-binSCRIPTS: $(bin_SCRIPTS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  if test -f $$d$$p; then \
	    f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	    echo " $(binSCRIPT_INSTALL) '$$d$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	    $(binSCRIPT_INSTALL) "$$d$$p" "$(DESTDIR)$(bindir)/$$f"; \
	  else :; fi; \
	done

uninstall-binSCRIPTS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_SCRIPTS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's|^.*/||;$(transform)'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/GUIClient.Po
include ./$(DEPDIR)/SMLog.Po
include ./$(DEPDIR)/absyn.Po
include ./$(DEPDIR)/adl_obj.Po
include ./$(DEPDIR)/adl_sys.Po
include ./$(DEPDIR)/adl_yacc.Po
include ./$(DEPDIR)/adlc.Po
include ./$(DEPDIR)/adllib.Po
include ./$(DEPDIR)/aggr_info.Po
include ./$(DEPDIR)/atlaswin.Po
include ./$(DEPDIR)/atlaswin_test.Po
include ./$(DEPDIR)/bind.Po
include ./$(DEPDIR)/buffer.Po
include ./$(DEPDIR)/builtin.Po
include ./$(DEPDIR)/compiler.Po
include ./$(DEPDIR)/dbt.Po
include ./$(DEPDIR)/driver.Po
include ./$(DEPDIR)/env.Po
include ./$(DEPDIR)/err.Po
include ./$(DEPDIR)/esl.Po
include ./$(DEPDIR)/eslc.Po
include ./$(DEPDIR)/eslt.Po
include ./$(DEPDIR)/fptree.Po
include ./$(DEPDIR)/getopt.Po
include ./$(DEPDIR)/getopt1.Po
include ./$(DEPDIR)/histmgr.Po
include ./$(DEPDIR)/io.Po
include ./$(DEPDIR)/ios.Po
include ./$(DEPDIR)/lex.Po
include ./$(DEPDIR)/list.Po
include ./$(DEPDIR)/memmgr.Po
include ./$(DEPDIR)/monitor.Po
include ./$(DEPDIR)/oid_rewrite.Po
include ./$(DEPDIR)/querySchdl.Po
include ./$(DEPDIR)/semant.Po
include ./$(DEPDIR)/semant_aggr.Po
include ./$(DEPDIR)/sql_rewrite.Po
include ./$(DEPDIR)/sqlsem.Po
include ./$(DEPDIR)/stmt.Po
include ./$(DEPDIR)/strategy.Po
include ./$(DEPDIR)/swimlib.Po
include ./$(DEPDIR)/symbol.Po
include ./$(DEPDIR)/table.Po
include ./$(DEPDIR)/testq.Po
include ./$(DEPDIR)/timeval.Po
include ./$(DEPDIR)/trans2C.Po
include ./$(DEPDIR)/types.Po
include ./$(DEPDIR)/udf.Po
include ./$(DEPDIR)/util.Po
include ./$(DEPDIR)/winbuf.Po
include ./$(DEPDIR)/windowBuf.Po

.c.o:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

swimlib.o: uda-swim/swimlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT swimlib.o -MD -MP -MF $(DEPDIR)/swimlib.Tpo -c -o swimlib.o `test -f 'uda-swim/swimlib.c' || echo '$(srcdir)/'`uda-swim/swimlib.c
	mv -f $(DEPDIR)/swimlib.Tpo $(DEPDIR)/swimlib.Po
#	source='uda-swim/swimlib.c' object='swimlib.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o swimlib.o `test -f 'uda-swim/swimlib.c' || echo '$(srcdir)/'`uda-swim/swimlib.c

swimlib.obj: uda-swim/swimlib.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT swimlib.obj -MD -MP -MF $(DEPDIR)/swimlib.Tpo -c -o swimlib.obj `if test -f 'uda-swim/swimlib.c'; then $(CYGPATH_W) 'uda-swim/swimlib.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/swimlib.c'; fi`
	mv -f $(DEPDIR)/swimlib.Tpo $(DEPDIR)/swimlib.Po
#	source='uda-swim/swimlib.c' object='swimlib.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o swimlib.obj `if test -f 'uda-swim/swimlib.c'; then $(CYGPATH_W) 'uda-swim/swimlib.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/swimlib.c'; fi`

fptree.o: uda-swim/common/fptree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT fptree.o -MD -MP -MF $(DEPDIR)/fptree.Tpo -c -o fptree.o `test -f 'uda-swim/common/fptree.c' || echo '$(srcdir)/'`uda-swim/common/fptree.c
	mv -f $(DEPDIR)/fptree.Tpo $(DEPDIR)/fptree.Po
#	source='uda-swim/common/fptree.c' object='fptree.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o fptree.o `test -f 'uda-swim/common/fptree.c' || echo '$(srcdir)/'`uda-swim/common/fptree.c

fptree.obj: uda-swim/common/fptree.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT fptree.obj -MD -MP -MF $(DEPDIR)/fptree.Tpo -c -o fptree.obj `if test -f 'uda-swim/common/fptree.c'; then $(CYGPATH_W) 'uda-swim/common/fptree.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/fptree.c'; fi`
	mv -f $(DEPDIR)/fptree.Tpo $(DEPDIR)/fptree.Po
#	source='uda-swim/common/fptree.c' object='fptree.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o fptree.obj `if test -f 'uda-swim/common/fptree.c'; then $(CYGPATH_W) 'uda-swim/common/fptree.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/fptree.c'; fi`

histmgr.o: uda-swim/common/histmgr.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT histmgr.o -MD -MP -MF $(DEPDIR)/histmgr.Tpo -c -o histmgr.o `test -f 'uda-swim/common/histmgr.c' || echo '$(srcdir)/'`uda-swim/common/histmgr.c
	mv -f $(DEPDIR)/histmgr.Tpo $(DEPDIR)/histmgr.Po
#	source='uda-swim/common/histmgr.c' object='histmgr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o histmgr.o `test -f 'uda-swim/common/histmgr.c' || echo '$(srcdir)/'`uda-swim/common/histmgr.c

histmgr.obj: uda-swim/common/histmgr.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT histmgr.obj -MD -MP -MF $(DEPDIR)/histmgr.Tpo -c -o histmgr.obj `if test -f 'uda-swim/common/histmgr.c'; then $(CYGPATH_W) 'uda-swim/common/histmgr.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/histmgr.c'; fi`
	mv -f $(DEPDIR)/histmgr.Tpo $(DEPDIR)/histmgr.Po
#	source='uda-swim/common/histmgr.c' object='histmgr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o histmgr.obj `if test -f 'uda-swim/common/histmgr.c'; then $(CYGPATH_W) 'uda-swim/common/histmgr.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/histmgr.c'; fi`

memmgr.o: uda-swim/common/memmgr.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT memmgr.o -MD -MP -MF $(DEPDIR)/memmgr.Tpo -c -o memmgr.o `test -f 'uda-swim/common/memmgr.c' || echo '$(srcdir)/'`uda-swim/common/memmgr.c
	mv -f $(DEPDIR)/memmgr.Tpo $(DEPDIR)/memmgr.Po
#	source='uda-swim/common/memmgr.c' object='memmgr.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o memmgr.o `test -f 'uda-swim/common/memmgr.c' || echo '$(srcdir)/'`uda-swim/common/memmgr.c

memmgr.obj: uda-swim/common/memmgr.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT memmgr.obj -MD -MP -MF $(DEPDIR)/memmgr.Tpo -c -o memmgr.obj `if test -f 'uda-swim/common/memmgr.c'; then $(CYGPATH_W) 'uda-swim/common/memmgr.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/memmgr.c'; fi`
	mv -f $(DEPDIR)/memmgr.Tpo $(DEPDIR)/memmgr.Po
#	source='uda-swim/common/memmgr.c' object='memmgr.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o memmgr.obj `if test -f 'uda-swim/common/memmgr.c'; then $(CYGPATH_W) 'uda-swim/common/memmgr.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/memmgr.c'; fi`

timeval.o: uda-swim/common/timeval.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT timeval.o -MD -MP -MF $(DEPDIR)/timeval.Tpo -c -o timeval.o `test -f 'uda-swim/common/timeval.c' || echo '$(srcdir)/'`uda-swim/common/timeval.c
	mv -f $(DEPDIR)/timeval.Tpo $(DEPDIR)/timeval.Po
#	source='uda-swim/common/timeval.c' object='timeval.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o timeval.o `test -f 'uda-swim/common/timeval.c' || echo '$(srcdir)/'`uda-swim/common/timeval.c

timeval.obj: uda-swim/common/timeval.c
	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT timeval.obj -MD -MP -MF $(DEPDIR)/timeval.Tpo -c -o timeval.obj `if test -f 'uda-swim/common/timeval.c'; then $(CYGPATH_W) 'uda-swim/common/timeval.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/timeval.c'; fi`
	mv -f $(DEPDIR)/timeval.Tpo $(DEPDIR)/timeval.Po
#	source='uda-swim/common/timeval.c' object='timeval.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o timeval.obj `if test -f 'uda-swim/common/timeval.c'; then $(CYGPATH_W) 'uda-swim/common/timeval.c'; else $(CYGPATH_W) '$(srcdir)/uda-swim/common/timeval.c'; fi`

.cc.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cc.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

GUIClient.o: esl/GUIClient.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GUIClient.o -MD -MP -MF $(DEPDIR)/GUIClient.Tpo -c -o GUIClient.o `test -f 'esl/GUIClient.cc' || echo '$(srcdir)/'`esl/GUIClient.cc
	mv -f $(DEPDIR)/GUIClient.Tpo $(DEPDIR)/GUIClient.Po
#	source='esl/GUIClient.cc' object='GUIClient.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GUIClient.o `test -f 'esl/GUIClient.cc' || echo '$(srcdir)/'`esl/GUIClient.cc

GUIClient.obj: esl/GUIClient.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GUIClient.obj -MD -MP -MF $(DEPDIR)/GUIClient.Tpo -c -o GUIClient.obj `if test -f 'esl/GUIClient.cc'; then $(CYGPATH_W) 'esl/GUIClient.cc'; else $(CYGPATH_W) '$(srcdir)/esl/GUIClient.cc'; fi`
	mv -f $(DEPDIR)/GUIClient.Tpo $(DEPDIR)/GUIClient.Po
#	source='esl/GUIClient.cc' object='GUIClient.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GUIClient.obj `if test -f 'esl/GUIClient.cc'; then $(CYGPATH_W) 'esl/GUIClient.cc'; else $(CYGPATH_W) '$(srcdir)/esl/GUIClient.cc'; fi`

buffer.o: esl/buffer.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT buffer.o -MD -MP -MF $(DEPDIR)/buffer.Tpo -c -o buffer.o `test -f 'esl/buffer.cc' || echo '$(srcdir)/'`esl/buffer.cc
	mv -f $(DEPDIR)/buffer.Tpo $(DEPDIR)/buffer.Po
#	source='esl/buffer.cc' object='buffer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o buffer.o `test -f 'esl/buffer.cc' || echo '$(srcdir)/'`esl/buffer.cc

buffer.obj: esl/buffer.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT buffer.obj -MD -MP -MF $(DEPDIR)/buffer.Tpo -c -o buffer.obj `if test -f 'esl/buffer.cc'; then $(CYGPATH_W) 'esl/buffer.cc'; else $(CYGPATH_W) '$(srcdir)/esl/buffer.cc'; fi`
	mv -f $(DEPDIR)/buffer.Tpo $(DEPDIR)/buffer.Po
#	source='esl/buffer.cc' object='buffer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o buffer.obj `if test -f 'esl/buffer.cc'; then $(CYGPATH_W) 'esl/buffer.cc'; else $(CYGPATH_W) '$(srcdir)/esl/buffer.cc'; fi`

dbt.o: esl/dbt.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dbt.o -MD -MP -MF $(DEPDIR)/dbt.Tpo -c -o dbt.o `test -f 'esl/dbt.cc' || echo '$(srcdir)/'`esl/dbt.cc
	mv -f $(DEPDIR)/dbt.Tpo $(DEPDIR)/dbt.Po
#	source='esl/dbt.cc' object='dbt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dbt.o `test -f 'esl/dbt.cc' || echo '$(srcdir)/'`esl/dbt.cc

dbt.obj: esl/dbt.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT dbt.obj -MD -MP -MF $(DEPDIR)/dbt.Tpo -c -o dbt.obj `if test -f 'esl/dbt.cc'; then $(CYGPATH_W) 'esl/dbt.cc'; else $(CYGPATH_W) '$(srcdir)/esl/dbt.cc'; fi`
	mv -f $(DEPDIR)/dbt.Tpo $(DEPDIR)/dbt.Po
#	source='esl/dbt.cc' object='dbt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o dbt.obj `if test -f 'esl/dbt.cc'; then $(CYGPATH_W) 'esl/dbt.cc'; else $(CYGPATH_W) '$(srcdir)/esl/dbt.cc'; fi`

querySchdl.o: esl/querySchdl.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT querySchdl.o -MD -MP -MF $(DEPDIR)/querySchdl.Tpo -c -o querySchdl.o `test -f 'esl/querySchdl.cc' || echo '$(srcdir)/'`esl/querySchdl.cc
	mv -f $(DEPDIR)/querySchdl.Tpo $(DEPDIR)/querySchdl.Po
#	source='esl/querySchdl.cc' object='querySchdl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o querySchdl.o `test -f 'esl/querySchdl.cc' || echo '$(srcdir)/'`esl/querySchdl.cc

querySchdl.obj: esl/querySchdl.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT querySchdl.obj -MD -MP -MF $(DEPDIR)/querySchdl.Tpo -c -o querySchdl.obj `if test -f 'esl/querySchdl.cc'; then $(CYGPATH_W) 'esl/querySchdl.cc'; else $(CYGPATH_W) '$(srcdir)/esl/querySchdl.cc'; fi`
	mv -f $(DEPDIR)/querySchdl.Tpo $(DEPDIR)/querySchdl.Po
#	source='esl/querySchdl.cc' object='querySchdl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o querySchdl.obj `if test -f 'esl/querySchdl.cc'; then $(CYGPATH_W) 'esl/querySchdl.cc'; else $(CYGPATH_W) '$(srcdir)/esl/querySchdl.cc'; fi`

driver.o: esl/driver.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT driver.o -MD -MP -MF $(DEPDIR)/driver.Tpo -c -o driver.o `test -f 'esl/driver.cc' || echo '$(srcdir)/'`esl/driver.cc
	mv -f $(DEPDIR)/driver.Tpo $(DEPDIR)/driver.Po
#	source='esl/driver.cc' object='driver.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o driver.o `test -f 'esl/driver.cc' || echo '$(srcdir)/'`esl/driver.cc

driver.obj: esl/driver.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT driver.obj -MD -MP -MF $(DEPDIR)/driver.Tpo -c -o driver.obj `if test -f 'esl/driver.cc'; then $(CYGPATH_W) 'esl/driver.cc'; else $(CYGPATH_W) '$(srcdir)/esl/driver.cc'; fi`
	mv -f $(DEPDIR)/driver.Tpo $(DEPDIR)/driver.Po
#	source='esl/driver.cc' object='driver.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o driver.obj `if test -f 'esl/driver.cc'; then $(CYGPATH_W) 'esl/driver.cc'; else $(CYGPATH_W) '$(srcdir)/esl/driver.cc'; fi`

monitor.o: esl/monitor.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT monitor.o -MD -MP -MF $(DEPDIR)/monitor.Tpo -c -o monitor.o `test -f 'esl/monitor.cc' || echo '$(srcdir)/'`esl/monitor.cc
	mv -f $(DEPDIR)/monitor.Tpo $(DEPDIR)/monitor.Po
#	source='esl/monitor.cc' object='monitor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o monitor.o `test -f 'esl/monitor.cc' || echo '$(srcdir)/'`esl/monitor.cc

monitor.obj: esl/monitor.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT monitor.obj -MD -MP -MF $(DEPDIR)/monitor.Tpo -c -o monitor.obj `if test -f 'esl/monitor.cc'; then $(CYGPATH_W) 'esl/monitor.cc'; else $(CYGPATH_W) '$(srcdir)/esl/monitor.cc'; fi`
	mv -f $(DEPDIR)/monitor.Tpo $(DEPDIR)/monitor.Po
#	source='esl/monitor.cc' object='monitor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o monitor.obj `if test -f 'esl/monitor.cc'; then $(CYGPATH_W) 'esl/monitor.cc'; else $(CYGPATH_W) '$(srcdir)/esl/monitor.cc'; fi`

strategy.o: esl/strategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT strategy.o -MD -MP -MF $(DEPDIR)/strategy.Tpo -c -o strategy.o `test -f 'esl/strategy.cc' || echo '$(srcdir)/'`esl/strategy.cc
	mv -f $(DEPDIR)/strategy.Tpo $(DEPDIR)/strategy.Po
#	source='esl/strategy.cc' object='strategy.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o strategy.o `test -f 'esl/strategy.cc' || echo '$(srcdir)/'`esl/strategy.cc

strategy.obj: esl/strategy.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT strategy.obj -MD -MP -MF $(DEPDIR)/strategy.Tpo -c -o strategy.obj `if test -f 'esl/strategy.cc'; then $(CYGPATH_W) 'esl/strategy.cc'; else $(CYGPATH_W) '$(srcdir)/esl/strategy.cc'; fi`
	mv -f $(DEPDIR)/strategy.Tpo $(DEPDIR)/strategy.Po
#	source='esl/strategy.cc' object='strategy.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o strategy.obj `if test -f 'esl/strategy.cc'; then $(CYGPATH_W) 'esl/strategy.cc'; else $(CYGPATH_W) '$(srcdir)/esl/strategy.cc'; fi`

stmt.o: esl/stmt.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stmt.o -MD -MP -MF $(DEPDIR)/stmt.Tpo -c -o stmt.o `test -f 'esl/stmt.cc' || echo '$(srcdir)/'`esl/stmt.cc
	mv -f $(DEPDIR)/stmt.Tpo $(DEPDIR)/stmt.Po
#	source='esl/stmt.cc' object='stmt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stmt.o `test -f 'esl/stmt.cc' || echo '$(srcdir)/'`esl/stmt.cc

stmt.obj: esl/stmt.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT stmt.obj -MD -MP -MF $(DEPDIR)/stmt.Tpo -c -o stmt.obj `if test -f 'esl/stmt.cc'; then $(CYGPATH_W) 'esl/stmt.cc'; else $(CYGPATH_W) '$(srcdir)/esl/stmt.cc'; fi`
	mv -f $(DEPDIR)/stmt.Tpo $(DEPDIR)/stmt.Po
#	source='esl/stmt.cc' object='stmt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o stmt.obj `if test -f 'esl/stmt.cc'; then $(CYGPATH_W) 'esl/stmt.cc'; else $(CYGPATH_W) '$(srcdir)/esl/stmt.cc'; fi`

compiler.o: esl/compiler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT compiler.o -MD -MP -MF $(DEPDIR)/compiler.Tpo -c -o compiler.o `test -f 'esl/compiler.cc' || echo '$(srcdir)/'`esl/compiler.cc
	mv -f $(DEPDIR)/compiler.Tpo $(DEPDIR)/compiler.Po
#	source='esl/compiler.cc' object='compiler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o compiler.o `test -f 'esl/compiler.cc' || echo '$(srcdir)/'`esl/compiler.cc

compiler.obj: esl/compiler.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT compiler.obj -MD -MP -MF $(DEPDIR)/compiler.Tpo -c -o compiler.obj `if test -f 'esl/compiler.cc'; then $(CYGPATH_W) 'esl/compiler.cc'; else $(CYGPATH_W) '$(srcdir)/esl/compiler.cc'; fi`
	mv -f $(DEPDIR)/compiler.Tpo $(DEPDIR)/compiler.Po
#	source='esl/compiler.cc' object='compiler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o compiler.obj `if test -f 'esl/compiler.cc'; then $(CYGPATH_W) 'esl/compiler.cc'; else $(CYGPATH_W) '$(srcdir)/esl/compiler.cc'; fi`

windowBuf.o: esl/windowBuf.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT windowBuf.o -MD -MP -MF $(DEPDIR)/windowBuf.Tpo -c -o windowBuf.o `test -f 'esl/windowBuf.cc' || echo '$(srcdir)/'`esl/windowBuf.cc
	mv -f $(DEPDIR)/windowBuf.Tpo $(DEPDIR)/windowBuf.Po
#	source='esl/windowBuf.cc' object='windowBuf.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o windowBuf.o `test -f 'esl/windowBuf.cc' || echo '$(srcdir)/'`esl/windowBuf.cc

windowBuf.obj: esl/windowBuf.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT windowBuf.obj -MD -MP -MF $(DEPDIR)/windowBuf.Tpo -c -o windowBuf.obj `if test -f 'esl/windowBuf.cc'; then $(CYGPATH_W) 'esl/windowBuf.cc'; else $(CYGPATH_W) '$(srcdir)/esl/windowBuf.cc'; fi`
	mv -f $(DEPDIR)/windowBuf.Tpo $(DEPDIR)/windowBuf.Po
#	source='esl/windowBuf.cc' object='windowBuf.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o windowBuf.obj `if test -f 'esl/windowBuf.cc'; then $(CYGPATH_W) 'esl/windowBuf.cc'; else $(CYGPATH_W) '$(srcdir)/esl/windowBuf.cc'; fi`

ios.o: esl/ios/ios.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ios.o -MD -MP -MF $(DEPDIR)/ios.Tpo -c -o ios.o `test -f 'esl/ios/ios.cc' || echo '$(srcdir)/'`esl/ios/ios.cc
	mv -f $(DEPDIR)/ios.Tpo $(DEPDIR)/ios.Po
#	source='esl/ios/ios.cc' object='ios.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ios.o `test -f 'esl/ios/ios.cc' || echo '$(srcdir)/'`esl/ios/ios.cc

ios.obj: esl/ios/ios.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ios.obj -MD -MP -MF $(DEPDIR)/ios.Tpo -c -o ios.obj `if test -f 'esl/ios/ios.cc'; then $(CYGPATH_W) 'esl/ios/ios.cc'; else $(CYGPATH_W) '$(srcdir)/esl/ios/ios.cc'; fi`
	mv -f $(DEPDIR)/ios.Tpo $(DEPDIR)/ios.Po
#	source='esl/ios/ios.cc' object='ios.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ios.obj `if test -f 'esl/ios/ios.cc'; then $(CYGPATH_W) 'esl/ios/ios.cc'; else $(CYGPATH_W) '$(srcdir)/esl/ios/ios.cc'; fi`

esl.o: esl/esl.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT esl.o -MD -MP -MF $(DEPDIR)/esl.Tpo -c -o esl.o `test -f 'esl/esl.cc' || echo '$(srcdir)/'`esl/esl.cc
	mv -f $(DEPDIR)/esl.Tpo $(DEPDIR)/esl.Po
#	source='esl/esl.cc' object='esl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o esl.o `test -f 'esl/esl.cc' || echo '$(srcdir)/'`esl/esl.cc

esl.obj: esl/esl.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT esl.obj -MD -MP -MF $(DEPDIR)/esl.Tpo -c -o esl.obj `if test -f 'esl/esl.cc'; then $(CYGPATH_W) 'esl/esl.cc'; else $(CYGPATH_W) '$(srcdir)/esl/esl.cc'; fi`
	mv -f $(DEPDIR)/esl.Tpo $(DEPDIR)/esl.Po
#	source='esl/esl.cc' object='esl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o esl.obj `if test -f 'esl/esl.cc'; then $(CYGPATH_W) 'esl/esl.cc'; else $(CYGPATH_W) '$(srcdir)/esl/esl.cc'; fi`

eslc.o: esl/eslc.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eslc.o -MD -MP -MF $(DEPDIR)/eslc.Tpo -c -o eslc.o `test -f 'esl/eslc.cc' || echo '$(srcdir)/'`esl/eslc.cc
	mv -f $(DEPDIR)/eslc.Tpo $(DEPDIR)/eslc.Po
#	source='esl/eslc.cc' object='eslc.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eslc.o `test -f 'esl/eslc.cc' || echo '$(srcdir)/'`esl/eslc.cc

eslc.obj: esl/eslc.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eslc.obj -MD -MP -MF $(DEPDIR)/eslc.Tpo -c -o eslc.obj `if test -f 'esl/eslc.cc'; then $(CYGPATH_W) 'esl/eslc.cc'; else $(CYGPATH_W) '$(srcdir)/esl/eslc.cc'; fi`
	mv -f $(DEPDIR)/eslc.Tpo $(DEPDIR)/eslc.Po
#	source='esl/eslc.cc' object='eslc.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eslc.obj `if test -f 'esl/eslc.cc'; then $(CYGPATH_W) 'esl/eslc.cc'; else $(CYGPATH_W) '$(srcdir)/esl/eslc.cc'; fi`

eslt.o: esl/eslt.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eslt.o -MD -MP -MF $(DEPDIR)/eslt.Tpo -c -o eslt.o `test -f 'esl/eslt.cc' || echo '$(srcdir)/'`esl/eslt.cc
	mv -f $(DEPDIR)/eslt.Tpo $(DEPDIR)/eslt.Po
#	source='esl/eslt.cc' object='eslt.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eslt.o `test -f 'esl/eslt.cc' || echo '$(srcdir)/'`esl/eslt.cc

eslt.obj: esl/eslt.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT eslt.obj -MD -MP -MF $(DEPDIR)/eslt.Tpo -c -o eslt.obj `if test -f 'esl/eslt.cc'; then $(CYGPATH_W) 'esl/eslt.cc'; else $(CYGPATH_W) '$(srcdir)/esl/eslt.cc'; fi`
	mv -f $(DEPDIR)/eslt.Tpo $(DEPDIR)/eslt.Po
#	source='esl/eslt.cc' object='eslt.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o eslt.obj `if test -f 'esl/eslt.cc'; then $(CYGPATH_W) 'esl/eslt.cc'; else $(CYGPATH_W) '$(srcdir)/esl/eslt.cc'; fi`

testq.o: esl/testq.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT testq.o -MD -MP -MF $(DEPDIR)/testq.Tpo -c -o testq.o `test -f 'esl/testq.cc' || echo '$(srcdir)/'`esl/testq.cc
	mv -f $(DEPDIR)/testq.Tpo $(DEPDIR)/testq.Po
#	source='esl/testq.cc' object='testq.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o testq.o `test -f 'esl/testq.cc' || echo '$(srcdir)/'`esl/testq.cc

testq.obj: esl/testq.cc
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT testq.obj -MD -MP -MF $(DEPDIR)/testq.Tpo -c -o testq.obj `if test -f 'esl/testq.cc'; then $(CYGPATH_W) 'esl/testq.cc'; else $(CYGPATH_W) '$(srcdir)/esl/testq.cc'; fi`
	mv -f $(DEPDIR)/testq.Tpo $(DEPDIR)/testq.Po
#	source='esl/testq.cc' object='testq.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o testq.obj `if test -f 'esl/testq.cc'; then $(CYGPATH_W) 'esl/testq.cc'; else $(CYGPATH_W) '$(srcdir)/esl/testq.cc'; fi`
install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(includedir)" || $(MKDIR_P) "$(DESTDIR)$(includedir)"
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(includeHEADERS_INSTALL) '$$d$$p' '$(DESTDIR)$(includedir)/$$f'"; \
	  $(includeHEADERS_INSTALL) "$$d$$p" "$(DESTDIR)$(includedir)/$$f"; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(includedir)/$$f'"; \
	  rm -f "$(DESTDIR)$(includedir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS) $(SCRIPTS) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(bindir)" "$(DESTDIR)$(includedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am: install-includeHEADERS

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS install-binSCRIPTS \
	install-libLIBRARIES

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-includeHEADERS uninstall-libLIBRARIES

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-binSCRIPTS install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am \
	install-includeHEADERS install-info install-info-am \
	install-libLIBRARIES install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-binSCRIPTS \
	uninstall-includeHEADERS uninstall-libLIBRARIES


adlcc:
	chmod +x adlcc

.grm.cc:
	$(YACC) $(AM_YFLAGS) $(YFLAGS) $< && \
	sed -e 's/yyn += yytoken;/yyn += yytoken;\
	{\
	int dodefault = (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yytoken);\
	int newlookahead; \
	if (((dodefault \&\& yydefact[yystate]==0) ||\
	(!dodefault \&\& (yytable[yyn] == YYPACT_NINF || yytable[yyn] == 0))) \&\&\
	(newlookahead = yylex2())) {\
	yychar = newlookahead;	goto yybackup;	\
	}	\
	}/' y.tab.c > $*.cc
	if test -f y.tab.h; then \
	if cmp -s y.tab.h $*.h; then rm -f y.tab.h; else mv y.tab.h $*.h; fi; \
	else :; fi
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
