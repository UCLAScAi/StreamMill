/*  
DBSCAN implementation on ATLaS
Richard Luo
lc@cs.ucla.edu
2002/6
*/
        table setofpoints (x int, y int, ClId int) btree(x,y);
	table temp (x int, y int, name char(30));
        /* meaning of ClId: -1: unclassified, 0: noise, 1,2,3...: cluster*/

        table nextid(ClusterId int) memory;
        table seeds (sx int, sy int, sClId int) memory;
	table cst (eps int, MinPts int) memory;	/*constants table*/



aggregate regionQuery(qx real, qy real, eps real):(r1 int,r2 int, r3 int)
{
 INITIALIZE : ITERATE:
   {	
/*	insert into stdout values('----');
	select x, y, qx, qy, (x-qx)*(x-qx) + (y - qy) * (y - qy) from setofpoints 
	where x <= qx + eps and x >= qx - eps and y <= qy + eps and y >= qy - eps and 
	(x-qx)*(x-qx) + (y - qy) * (y - qy) <= eps * eps;
*/
	INSERT INTO return select x,y, ClId from setofpoints 
	where x <= qx + eps and x >= qx - eps and y <= qy + eps and y >= qy - eps and 
		 (x-qx)*(x-qx) + (y - qy) * (y - qy) <= eps * eps;

}
terminate:{}
};
	
aggregate changeClId (sx int, sy int, ClusterId int, Eps int, MinPts int):int
{
 table result (rx int, ry int, rClId int) memory;
 table resultsize (size int) memory;
 initialize :
 iterate :
   {
	insert into result 
	select regionQuery(sx, sy, Eps);
    	insert into resultsize select count(rx) from result;
    	insert into seeds 
		select rx, ry, -1 from result
	        where (select size from resultsize)>=MinPts and rClId = -1;
    	
	update setofpoints set ClId=ClusterId
	where (select size from resultsize)>=MinPts and 
	exists (select rx from result 
		where setofpoints.x = rx and setofpoints.y = ry and (rClId = -1 or rClId = 0));
    	delete from seeds where seeds.sx=sx and seeds.sy=sy;
	delete from resultsize where 1=1;   
	delete from result where 1=1;
}
};

AGGREGATE ExpandCluster (ex int, ey int, ClusterId int, Eps int, MinPts int):int
{
        table seedssize (size int) memory;
        initialize:
        iterate:
         {
          insert into seeds select regionQuery (ex, ey, Eps);
          insert into seedssize select count(sx) from seeds;
	  update setofpoints set ClId=0
		where (select size from seedssize)<MinPts and x = ex and y = ey;
          update setofpoints set ClId=ClusterId
                 where exists (select sx from seeds where sx=setofpoints.x and sy=setofpoints.y)
			and SQLCODE=1;
          update nextid set ClusterId=ClusterId+1 where SQLCODE=0;
          delete from seeds where sx=ex and sy=ey and SQLCODE=0;
          select changeClId (sx, sy, ClusterId, Eps, MinPts) from seeds
		where SQLCODE=0;
	  delete from seedssize where 1=1;
	  delete from seeds where 1=1;
         }
};



aggregate print(x int,c int):int
{
table temp(t int) memory;
table ClId(v int) memory;
initialize:
{
	insert into temp values(x);
	insert into ClId values(c);
}
iterate:
{
	insert into temp values(x);
		
}
terminate:{
	insert into return
		select v from ClId;
	insert into return 
		select t from temp;
}
};



        insert into nextid values (1);


/* test data set */
/*
	insert into cst values(1,3);  
	insert into setofpoints values (1,1,-1), (1,3,-1), (2,2,-1), (3,1,-1), (3,2,-1), (3,3,-1),(4,2,-1);
*/

/* load data from file */
				/*(eps,MinPts)*/

	load from 'dbscan_const' into cst;
	load from 'dbscan.input' into temp;
	insert into setofpoints
	select 0-x, 0-y, -1
	from temp
	where x<0 and y<0;


        select ExpandCluster(x, y, ClusterId, eps, MinPts)
        from setofpoints, nextid,cst
        where ClId<0;

	insert into stdout
	select x,y,ClId
	from setofpoints
	where ClId<>0;


	insert into stdout values('---X---');
	select print(x, ClId) from setofpoints where ClId<>0
	group by ClId;

	insert into stdout values('---Y---');
	select print(y,ClId) from setofpoints where ClId <>0
	group by ClId;


	select ClId, count(x)
	from setofpoints
	group by ClId;
	select 'EPS :', eps from cst;
	select 'Min_neighbours :', MinPts from cst;
	select 'Clusters :', ClusterId-1 from nextid;

